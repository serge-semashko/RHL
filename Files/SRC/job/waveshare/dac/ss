Сравнение файлов dac8532_test.c и DAC8532_TEST_1.C
***** dac8532_test.c
/*
 * DAC8532_test.c:
 *      Very simple program to test the serial port. Expects
 *      the port to be looped back to itself
 *
 */
 
/*
             define from bcm2835.h                       define from Board 
DVK511
                 3.3V | | 5V               ->                 3.3V | | 5V
    RPI_V2_GPIO_P1_03 | | 5V               ->                  SDA | | 5V 
    RPI_V2_GPIO_P1_05 | | GND              ->                  SCL | | GND
       RPI_GPIO_P1_07 | | RPI_GPIO_P1_08   ->                  IO7 | | TX
                  GND | | RPI_GPIO_P1_10   ->                  GND | | RX
       RPI_GPIO_P1_11 | | RPI_GPIO_P1_12   ->                  IO0 | | IO1
    RPI_V2_GPIO_P1_13 | | GND              ->                  IO2 | | GND
       RPI_GPIO_P1_15 | | RPI_GPIO_P1_16   ->                  IO3 | | IO4
                  VCC | | RPI_GPIO_P1_18   ->                  VCC | | IO5
       RPI_GPIO_P1_19 | | GND              ->                 MOSI | | GND
       RPI_GPIO_P1_21 | | RPI_GPIO_P1_22   ->                 MISO | | IO6
       RPI_GPIO_P1_23 | | RPI_GPIO_P1_24   ->                  SCK | | CE0
                  GND | | RPI_GPIO_P1_26   ->                  GND | | CE1

::if your raspberry Pi is version 1 or rev 1 or rev A
RPI_V2_GPIO_P1_03->RPI_GPIO_P1_03
RPI_V2_GPIO_P1_05->RPI_GPIO_P1_05
RPI_V2_GPIO_P1_13->RPI_GPIO_P1_13
::
*/

#include <bcm2835.h>  
#include <stdio.h>
***** DAC8532_TEST_1.C
#include <bcm2835.h>  
#include <stdio.h>
*****

***** dac8532_test.c
#include <string.h>
#include <math.h>
***** DAC8532_TEST_1.C
#include <string.h>
#include <stdlib.h>
#include <math.h>
*****

***** dac8532_test.c

#define SPICS   RPI_GPIO_P1_16  //P4

#define CS_1() bcm2835_gpio_write(SPICS,HIGH)
#define CS_0()  bcm2835_gpio_write(SPICS,LOW)

***** DAC8532_TEST_1.C

#define SPI_CS  RPI_GPIO_P1_16  //P4

#define CS_1() bcm2835_gpio_write(SPI_CS, HIGH)
#define CS_0() bcm2835_gpio_write(SPI_CS, LOW)

*****

***** dac8532_test.c

#define channel_A   0x30
#define channel_B   0x34
                
void  bsp_DelayUS(uint64_t micros);
void Write_DAC8532(uint8_t channel, uint16_t Data);
uint16_t Voltage_Convert(float Vref, float voltage);

***** DAC8532_TEST_1.C

const double V_REF = 5.14; //V_POWER on RPi 3 

const unsigned int ch_A = 0x30;
const unsigned int ch_B = 0x34;

void bsp_DelayUS(uint64_t micros);
void write_DAC8532(uint8_t channel, uint16_t Data);
uint16_t V_convert(double Vref, double voltage);

*****

***** dac8532_test.c

void  bsp_DelayUS(uint64_t micros)
{
                bcm2835_delayMicroseconds (micros);
}
***** DAC8532_TEST_1.C

void bsp_DelayUS(uint64_t micros)
{
        bcm2835_delayMicroseconds (micros);
}
*****

***** dac8532_test.c

void Write_DAC8532(uint8_t channel, uint16_t Data)
{
        uint8_t i;

         CS_1() ;
         CS_0() ;
      bcm2835_spi_transfer(channel);
      bcm2835_spi_transfer((Data>>8));
      bcm2835_spi_transfer((Data&0xff));  
      CS_1() ;
}
***** DAC8532_TEST_1.C

void write_DAC8532(uint8_t channel, uint16_t Data)
{
        bcm2835_gpio_write(SPI_CS, HIGH);
        bcm2835_gpio_write(SPI_CS, LOW);
        
        bcm2835_spi_transfer(channel);
        bcm2835_spi_transfer((Data>>8));
        bcm2835_spi_transfer((Data&0xff));  
        
        bcm2835_gpio_write(SPI_CS, HIGH);
}
*****

***** dac8532_test.c

uint16_t Voltage_Convert(float Vref, float voltage)
{
        uint16_t _D_;
        _D_ = (uint16_t)(65536 * voltage / Vref);
    
        return _D_;
}
int  main()
{
   uint16_t   i,tmp;
   
        if (!bcm2835_init())
        return 1;
    bcm2835_spi_begin();
***** DAC8532_TEST_1.C

uint16_t V_convert(double Vref, double voltage)
{
        uint16_t res = (uint16_t)(65536 * voltage / Vref);

        return res;
}

int main(int argc, char **argv)
{   
        if (bcm2835_init() != 1) {
                fprintf(stderr, "Error in bcm2835_init()\n");
                return -1;
        }

    bcm2835_spi_begin();
*****

***** dac8532_test.c
    bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_1024); // The default
    bcm2835_gpio_fsel(SPICS, BCM2835_GPIO_FSEL_OUTP);//
    bcm2835_gpio_write(SPICS, HIGH);    

    i = 0;
    tmp=0;
   while(1)
   {       
     if(tmp==0)
        {
                        Write_DAC8532(0x30, Voltage_Convert(5.0,0.00+(float)i/10));     //Write channel A buffer (0x30)
                        Write_DAC8532(0x34, Voltage_Convert(5.0,5.000-(float)i/10));            //Write channel B buffer (0x34)
                
                        i++;
                        if(i==50)
                        {
                                i=0;
                                 tmp=1;
                        }
                        bsp_DelayUS(50000);
        }
   else if(tmp==1)
   {
                        Write_DAC8532(0x30, Voltage_Convert(5.0,5.000-(float)i/10));            //Write channel B buffer (0x30)
        
                        Write_DAC8532(0x34, Voltage_Convert(5.0,0.00+(float)i/10));     //Write channel A buffer (0x34)
                                
                        i++;
                        if(i==50)
                        {
                                i=0;  
                               tmp=0;
                        }
                        bsp_DelayUS(50000);
   }
   }
    bcm2835_spi_end();
***** DAC8532_TEST_1.C
    bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_1024); // The default

    bcm2835_gpio_fsel(SPI_CS, BCM2835_GPIO_FSEL_OUTP);//
    bcm2835_gpio_write(SPI_CS, HIGH);

    if (argc == 2) {
        printf("argc = %d | argv[1] = %e\n", argc, (double)atof(argv[1]));
        write_DAC8532( ch_A, V_convert(V_REF, (double)atof(argv[1])) );
    }
    else {
        write_DAC8532(ch_A, V_convert(V_REF, 1.0));
    }

    bcm2835_spi_end();
*****

***** dac8532_test.c
    bcm2835_close();
        
    return 0;
***** DAC8532_TEST_1.C
    bcm2835_close();

    return 0;
*****

