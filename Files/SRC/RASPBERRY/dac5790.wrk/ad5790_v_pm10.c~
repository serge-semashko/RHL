
//to execute
//sudo ./ad5790_v init - for initialisation (first start)
//sudo ./ad5790_v VOLTAGE - to set VOLTAGE [V]

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <bcm2835.h>

#define GPIO12 RPI_BPLUS_GPIO_J8_32
#define GPIO21 RPI_BPLUS_GPIO_J8_40

const double VREFP = 20.37;
const double VREFN = 5.05;


void init_DAC()
{
  char mosi[3] = {0};

  //RESET
  mosi[0] = 0b01000000;
  mosi[1] = 0b00000000;
  mosi[2] = 0b00000100;
  bcm2835_gpio_write(GPIO12, HIGH);
  bcm2835_gpio_write(GPIO12, LOW);
  bcm2835_spi_transfern(mosi, 3);
  bcm2835_gpio_write(GPIO12, HIGH);

  usleep(1000);
  
  //write to control register
  mosi[0] = 0b00100000;
  mosi[1] = 0b00000000;
  mosi[2] = 0b00010010;
  bcm2835_gpio_write(GPIO12, HIGH);
  bcm2835_gpio_write(GPIO12, LOW);
  bcm2835_spi_transfern(mosi, 3);
  bcm2835_gpio_write(GPIO12, HIGH);
}

void set_V(char *msb)
{
  char mosi[3] = {0};

  mosi[0] = 0b00010000 | (msb[0] & 0b00001111);
  mosi[1] = msb[1];
  mosi[2] = msb[2];
    
  bcm2835_gpio_write(GPIO12, HIGH);
  bcm2835_gpio_write(GPIO12, LOW);
  bcm2835_spi_transfern(mosi, 3);
  bcm2835_gpio_write(GPIO12, HIGH);
}

int main(int argc, char **argv)
{
  if (argc != 2) {
    fprintf(stderr, "Error input format should be \"./ad5790_v V\"\n");

    return -1;
  }

  //init SPI
  int ret = 0;

  ret = bcm2835_init();
  if (ret != 1) {
    fprintf(stderr, "Error in bcm2835_init()\n");
    
    return -1;
  }

  ret = bcm2835_spi_begin();
  if (ret != 1) {
    fprintf(stderr, "Error in spi begin! ret code = %d\n", ret);
    
    return -1;
  }

  //setting SPI and CS
  bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_LSBFIRST);
  bcm2835_spi_setDataMode(BCM2835_SPI_MODE1);
  bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_1024);
  bcm2835_gpio_fsel(GPIO12, BCM2835_GPIO_FSEL_OUTP);
  bcm2835_gpio_write(GPIO12, HIGH);

  //if initialization of DAC (1st start)
  if (strncmp(argv[1], "init", 4) == 0) {
    init_DAC();
  }
  else {
    //double V_out = (VREFP - VREFN)*( (double)(256*256*(mosi[0] & 0b00001111) + 256*mosi[1] + mosi[2])/1048576.0 ) - VREFN;
    //20^{20} = 1048576.0
    
    double Vout = atof(argv[1]) - 1e-6;
    long int DAC_code = 1048576.0*(Vout + VREFN) / (VREFP - VREFN);
    
    char msb[3] = {0};
    msb[0] = DAC_code / (256*256);
    msb[1] = (DAC_code - 256*256*msb[0])/256;
    msb[2] = (DAC_code - 256*256*msb[0] - 256*msb[1]);
 
    printf("msb = {%d %d %d}\n", msb[0], msb[1], msb[2]);
    
    set_V(msb);
  }

  bcm2835_spi_end();
  bcm2835_close();

  return 0;
}
