Сравнение файлов ads1256_test_1.c и ADS1256_TEST_2.C
***** ads1256_test_1.c
#include <errno.h>

//CS      -----   SPICS  
//DIN     -----   MOSI
//DOUT  -----   MISO
//SCLK   -----   SCLK
//DRDY  -----   ctl_IO     data  starting
//RST     -----   ctl_IO     reset

***** ADS1256_TEST_2.C
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <err.h>

*****

***** ads1256_test_1.c

#define  DRDY  RPI_GPIO_P1_11         //P0
#define  RST  RPI_GPIO_P1_12     //P1
#define SPICS   RPI_GPIO_P1_15  //P3

#define CS_1() bcm2835_gpio_write(SPICS,HIGH)
#define CS_0()  bcm2835_gpio_write(SPICS,LOW)

#define DRDY_IS_LOW()   ((bcm2835_gpio_lev(DRDY)==0))

#define RST_1()         bcm2835_gpio_write(RST,HIGH);
#define RST_0()         bcm2835_gpio_write(RST,LOW);

***** ADS1256_TEST_2.C

int strstart = 0;
char answer[2048];
char *pansw;
char nword[100],metod[100],protocol[100],uri[100];
int strpos;
char resp1[2048];
char response[100] = "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/html; charset=UTF-8\r\n\r\n"
        "{ADC:";
//        "<!DOCTYPE html><html><head><title>Bye-bye baby bye-bye</title>"
//        "<style>body { background-color: #111 }"
//        "h1 { font-size:4cm; text-align: center; color: black;"
//        " text-shadow: 0 0 2mm red}</style></head>"
//        "<body><h1>Goodbye, world!</h1></body></html>\r\n";

/*
 * 
 */
void getword() {
    strstart = strpos;
    printf("\n###pos startpos %d \n", strpos);
    while (*(answer + strpos) != ' ') {
        
        //             && ((answer + strpos) != "\r\n")
        printf("%c",*(answer+strpos));
        strpos++;
    };
    memset(nword,0,100);
    
    strncpy(nword, answer + strstart, strpos - strstart);
    printf("\n ###pos after %d \"%s\"\n", strpos,nword);
    strpos++;
    ;

}

//CS      -----   SPICS  
//DIN     -----   MOSI
//DOUT  -----   MISO
//SCLK   -----   SCLK
//DRDY  -----   ctl_IO     data  starting
//RST     -----   ctl_IO     reset

*****

***** ads1256_test_1.c


/* Unsigned integer types  */
#define uint8_t unsigned char
#define uint16_t unsigned short    
#define uint32_t unsigned long     

***** ADS1256_TEST_2.C

#define  DRDY  RPI_GPIO_P1_11         //P0
#define  RST  RPI_GPIO_P1_12     //P1
#define SPICS   RPI_GPIO_P1_15  //P3

#define CS_1() bcm2835_gpio_write(SPICS,HIGH)
#define CS_0()  bcm2835_gpio_write(SPICS,LOW)

#define DRDY_IS_LOW()   ((bcm2835_gpio_lev(DRDY)==0))

#define RST_1()         bcm2835_gpio_write(RST,HIGH);
#define RST_0()         bcm2835_gpio_write(RST,LOW);

*****

***** ads1256_test_1.c

typedef enum {FALSE = 0, TRUE = !FALSE} bool;
***** ADS1256_TEST_2.C


/* Unsigned integer types  */
#define uint8_t unsigned char
#define uint16_t unsigned short    
#define uint32_t unsigned long     


typedef enum {FALSE = 0, TRUE = !FALSE} bool;
*****

***** ads1256_test_1.c

        uint8_t id;
***** ADS1256_TEST_2.C


        int one = 1, client_fd;
        int rdlen;
        struct sockaddr_in svr_addr, cli_addr;
        socklen_t sin_len = sizeof (cli_addr);
        
        int sock = socket(AF_INET, SOCK_STREAM, 0);
        if (sock < 0)
          err(1, "can't open socket");

        setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof (int));
        
        int port = 8282;
        svr_addr.sin_family = AF_INET;
        svr_addr.sin_addr.s_addr = INADDR_ANY;
        svr_addr.sin_port = htons(port);
        
        if (bind(sock, (struct sockaddr *) &svr_addr, sizeof (svr_addr)) == -1) {
          close(sock);
          err(1, "Can't bind");
        }
        

        uint8_t id;
*****

***** ads1256_test_1.c

        while (1) {
                while (1) {
                        if (DRDY_IS_LOW() == 1) {
                                        if (g_tADS1256.ScanMode == 0) {
                                                ADS1256_SetChannal(0b0011);     /*Switch channel mode */
                                                bsp_DelayUS(5);

                                                ADS1256_WriteCmd(CMD_SYNC);
                                                bsp_DelayUS(5);

                                                ADS1256_WriteCmd(CMD_WAKEUP);
                                                bsp_DelayUS(25);

                                                AIN3_val = ADS1256_ReadData();
                                                printf("AIN3 = %ld\n", AIN3_val);
                                        }

                                        break;
                        }
                }

                buf[0] = ((uint32_t)AIN3_val >> 16) & 0xFF;
                buf[1] = ((uint32_t)AIN3_val >> 8) & 0xFF;
                buf[2] = ((uint32_t)AIN3_val >> 0) & 0xFF;

                printf("OUTPUT = %02X%02X%02X, %8ld", (int)buf[0], (int)buf[1], (int)buf[2], AIN3_val);

                V_in = AIN3_val*0.5925; /* Vin [uV] */
                if (V_in < 0) {
                        V_in = -V_in;
                        printf(" (-%ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
                }
                else {
                        printf(" ( %ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
                }

                bsp_DelayUS(1000000);
        }

***** ADS1256_TEST_2.C

        listen(sock, 5);
        while (1) {
          client_fd = accept(sock, (struct sockaddr *) &cli_addr, &sin_len);
          printf("got connection\n");
          
          if (client_fd == -1) {
            perror("Can't accept");
            continue;
          }

          printf("got connection\n");
          rdlen = read(client_fd, answer, 2000);
          printf("answer %s \n", answer);
          strstart = 0;
          strpos = 0;
          /*    nword = "";
         */
          getword();
          strcpy(metod,nword);
          getword();
          strcpy(uri,nword);
          getword();
          strcpy(protocol,nword);
          printf("metod=%s uri=%s protocol=%s",metod,uri,protocol);

          
          while (1) {
            if (DRDY_IS_LOW() == 1) {
              if (g_tADS1256.ScanMode == 0) {
                ADS1256_SetChannal(0b0011);     /*Switch channel mode */
                bsp_DelayUS(5);
                
                ADS1256_WriteCmd(CMD_SYNC);
                bsp_DelayUS(5);

                ADS1256_WriteCmd(CMD_WAKEUP);
                bsp_DelayUS(25);

                AIN3_val = ADS1256_ReadData();
                printf("AIN3 = %ld\n", AIN3_val);
              }

              break;
            }
          }

          buf[0] = ((uint32_t)AIN3_val >> 16) & 0xFF;
          buf[1] = ((uint32_t)AIN3_val >> 8) & 0xFF;
          buf[2] = ((uint32_t)AIN3_val >> 0) & 0xFF;
          
          printf("OUTPUT = %02X%02X%02X, %8ld", (int)buf[0], (int)buf[1], (int)buf[2], AIN3_val);
          
          V_in = AIN3_val*0.5925;       /* Vin [uV] */
          if (V_in < 0) {
            V_in = -V_in;
            printf(" (-%ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
          }
          else {
            printf(" ( %ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
          }

          bsp_DelayUS(1000000);
          
          double val = V_in;

          sprintf(nword,"%f}",val);
          strcat(response,nword);
          write(client_fd, response, sizeof (response) - 1); /*-1:'\0'*/
          close(client_fd);
        }       

*****

