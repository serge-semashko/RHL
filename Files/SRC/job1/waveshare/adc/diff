‘à ¢­¥­¨¥ ä ©«®¢ ads1256_test.c ¨ ADS1256_TEST_1.C
***** ads1256_test.c
#include <string.h>
#include <math.h>
***** ADS1256_TEST_1.C
#include <string.h>
#include <sys/types.h>
#include <math.h>
*****

***** ads1256_test.c
*********************************************************************************************************
*       name: ADS1256_SetChannal
*       function: Configuration channel number
*       parameter:  _ch:  channel number  0--7
*       The return value: NULL
*********************************************************************************************************
***** ADS1256_TEST_1.C
*********************************************************************************************************
*       name: ADS1256_ReadOFC
*       function: Read Offset Callibration Bytes (OFC) see p. and 33 of the ADS1256 manual
*       parameter: NULL
*       The return value: OFC value
*********************************************************************************************************
*****

***** ads1256_test.c
*/
static void ADS1256_SetChannal(uint8_t _ch)
{
        /*
        Bits 7-4 PSEL3, PSEL2, PSEL1, PSEL0: Positive Input Channel (AINP) Select
                0000 = AIN0 (default)
                0001 = AIN1
                0010 = AIN2 (ADS1256 only)
                0011 = AIN3 (ADS1256 only)
                0100 = AIN4 (ADS1256 only)
                0101 = AIN5 (ADS1256 only)
                0110 = AIN6 (ADS1256 only)
                0111 = AIN7 (ADS1256 only)
                1xxx = AINCOM (when PSEL3 = 1, PSEL2, PSEL1, PSEL0 are ¡°don¡¯t care¡±)

                NOTE: When using an ADS1255 make sure to only select the available inputs.

        Bits 3-0 NSEL3, NSEL2, NSEL1, NSEL0: Negative Input Channel (AINN)Select
                0000 = AIN0
                0001 = AIN1 (default)
                0010 = AIN2 (ADS1256 only)
                0011 = AIN3 (ADS1256 only)
                0100 = AIN4 (ADS1256 only)
                0101 = AIN5 (ADS1256 only)
                0110 = AIN6 (ADS1256 only)
                0111 = AIN7 (ADS1256 only)
                1xxx = AINCOM (when NSEL3 = 1, NSEL2, NSEL1, NSEL0 are ¡°don¡¯t care¡±)
        */
        if (_ch > 7)
        {
                return;
        }
        printf("in SetChannal to mux = %xh\n", (_ch << 4) | (1 << 3));

        ADS1256_WriteReg(REG_MUX, (_ch << 4) | (1 << 3));       /* Bit3 = 1, AINN connection AINCOM */
}
***** ADS1256_TEST_1.C
*/
void ADS1256_ReadOFC(void)
{
        unsigned char ofc[3] = {0};

        ADS1256_WaitDRDY();
        ofc[0] = ADS1256_ReadReg(REG_OFC0);
        ofc[1] = ADS1256_ReadReg(REG_OFC1);
        ofc[2] = ADS1256_ReadReg(REG_OFC2);

        printf("ofc[0] = %d | ofc[1] = %d | ofc[2] = %d\n", ofc[0], ofc[1], ofc[2]);
        printf("ofc = %d\n", (ofc[2] << 16) + (ofc[1] << 8) + ofc[0]);
}
*****

***** ads1256_test.c
*********************************************************************************************************
*       name: ADS1256_SetDiffChannal
*       function: The configuration difference channel
*       parameter:  _ch:  channel number  0--3
*       The return value:  four high status register
*********************************************************************************************************
***** ADS1256_TEST_1.C
*********************************************************************************************************
*       name: ADS1256_ReadFSC
*       function: Read Full-scale Callibration (FSC) see p. and 33 of the ADS1256 manual
*       parameter: NULL
*       The return value FSC value
*********************************************************************************************************
*****

***** ads1256_test.c
*/
static void ADS1256_SetDiffChannal(uint8_t _ch)
{
***** ADS1256_TEST_1.C
*/
void ADS1256_ReadFSC(void)
{
        unsigned char fsc[3] = {0};

        ADS1256_WaitDRDY();
        fsc[0] = ADS1256_ReadReg(REG_FSC0);
        fsc[1] = ADS1256_ReadReg(REG_FSC1);
        fsc[2] = ADS1256_ReadReg(REG_FSC2);

        printf("fsc[0] = %d | fsc[1] = %d | fsc[2] = %d\n", fsc[0], fsc[1], fsc[2]);
        printf("fsc = %d\n", (fsc[2] << 16) + (fsc[1] << 8) + fsc[0]);
}

/*
*********************************************************************************************************
*       name: ADS1256_SetChannal
*       function: Configuration channel number
*       parameter:  _ch:  channel number  0--7
*       The return value: NULL
*********************************************************************************************************
*/
static void ADS1256_SetChannal(uint8_t _ch)
{
*****

***** ads1256_test.c
        */
        if (_ch == 0)
        {
                ADS1256_WriteReg(REG_MUX, (0 << 4) | 1);        /* DiffChannal  AIN0£¬ AIN1 */
        }
        else if (_ch == 1)
        {
                ADS1256_WriteReg(REG_MUX, (2 << 4) | 3);        /*DiffChannal   AIN2£¬ AIN3 */
        }
        else if (_ch == 2)
        {
                ADS1256_WriteReg(REG_MUX, (4 << 4) | 5);        /*DiffChannal    AIN4£¬ AIN5 */
        }
        else if (_ch == 3)
        {
                ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);        /*DiffChannal   AIN6£¬ AIN7 */
        }
}
***** ADS1256_TEST_1.C
        */
        if (_ch > 7)
        {
                return;
        }
        printf("in SetChannal to mux = %xh\n", (_ch << 4) | (1 << 3));

        ADS1256_WriteReg(REG_MUX, (_ch << 4) | (1 << 3));       /* Bit3 = 1, AINN connection AINCOM */
}
*****

***** ads1256_test.c
*********************************************************************************************************
*       name: ADS1256_WaitDRDY
*       function: delay time  wait for automatic calibration
*       parameter:  NULL
*       The return value:  NULL
*********************************************************************************************************
***** ADS1256_TEST_1.C
*********************************************************************************************************
*       name: ADS1256_SetDiffChannal
*       function: The configuration difference channel
*       parameter:  _ch:  channel number  0--3
*       The return value:  four high status register
*********************************************************************************************************
*****

***** ads1256_test.c
*/
static void ADS1256_WaitDRDY(void)
{
        uint32_t i;

        for (i = 0; i < 400000; i++)
        {
                if (DRDY_IS_LOW())
                {
                        break;
                }
        }
        if (i >= 400000)
        {
                printf("ADS1256_WaitDRDY() Time Out ...\r\n");          
        }
***** ADS1256_TEST_1.C
*/
static void ADS1256_SetDiffChannal(uint8_t _ch)
{
        /*
        Bits 7-4 PSEL3, PSEL2, PSEL1, PSEL0: Positive Input Channel (AINP) Select
                0000 = AIN0 (default)
                0001 = AIN1
                0010 = AIN2 (ADS1256 only)
                0011 = AIN3 (ADS1256 only)
                0100 = AIN4 (ADS1256 only)
                0101 = AIN5 (ADS1256 only)
                0110 = AIN6 (ADS1256 only)
                0111 = AIN7 (ADS1256 only)
                1xxx = AINCOM (when PSEL3 = 1, PSEL2, PSEL1, PSEL0 are ¡°don¡¯t care¡±)

                NOTE: When using an ADS1255 make sure to only select the available inputs.

        Bits 3-0 NSEL3, NSEL2, NSEL1, NSEL0: Negative Input Channel (AINN)Select
                0000 = AIN0
                0001 = AIN1 (default)
                0010 = AIN2 (ADS1256 only)
                0011 = AIN3 (ADS1256 only)
                0100 = AIN4 (ADS1256 only)
                0101 = AIN5 (ADS1256 only)
                0110 = AIN6 (ADS1256 only)
                0111 = AIN7 (ADS1256 only)
                1xxx = AINCOM (when NSEL3 = 1, NSEL2, NSEL1, NSEL0 are ¡°don¡¯t care¡±)
        */
        if (_ch == 0)
        {
                ADS1256_WriteReg(REG_MUX, (0 << 4) | 1);        /* DiffChannal  AIN0£¬ AIN1 */
        }
        else if (_ch == 1)
        {
                ADS1256_WriteReg(REG_MUX, (2 << 4) | 3);        /*DiffChannal   AIN2£¬ AIN3 */
        }
        else if (_ch == 2)
        {
                ADS1256_WriteReg(REG_MUX, (4 << 4) | 5);        /*DiffChannal    AIN4£¬ AIN5 */
        }
        else if (_ch == 3)
        {
                ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);        /*DiffChannal   AIN6£¬ AIN7 */
        }
*****

***** ads1256_test.c
*********************************************************************************************************
*       name: ADS1256_ReadData
*       function: read ADC value
*       parameter: NULL
*       The return value:  NULL
***** ADS1256_TEST_1.C
*********************************************************************************************************
*       name: ADS1256_WaitDRDY
*       function: delay time  wait for automatic calibration
*       parameter:  NULL
*       The return value:  NULL
*****

***** ads1256_test.c
*/
static int32_t ADS1256_ReadData(void)
***** ADS1256_TEST_1.C
*/
static void ADS1256_WaitDRDY(void)
{
        uint32_t i;

        for (i = 0; i < 400000; i++)
        {
                if (DRDY_IS_LOW())
                {
                        break;
                }
        }
        if (i >= 400000)
        {
                printf("ADS1256_WaitDRDY() Time Out ...\r\n");          
        }
}

/*
*********************************************************************************************************
*       name: ADS1256_ReadData
*       function: read ADC value
*       parameter: NULL
*       The return value:  NULL
*********************************************************************************************************
*/
static int32_t ADS1256_ReadData(void)
*****

***** ads1256_test.c

int  main()
{
  uint8_t id;
  int32_t adc[8];
  int32_t volt[8];
  uint8_t i;
  uint8_t ch_num;
  int32_t iTemp;
  uint8_t buf[3];
  if (!bcm2835_init())
    return 1;
  bcm2835_spi_begin();
  bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_LSBFIRST);      // The default
  bcm2835_spi_setDataMode(BCM2835_SPI_MODE1);                   // The default
  bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_1024); // The default
  bcm2835_gpio_fsel(SPICS, BCM2835_GPIO_FSEL_OUTP);//
  bcm2835_gpio_write(SPICS, HIGH);
  bcm2835_gpio_fsel(DRDY, BCM2835_GPIO_FSEL_INPT);
  bcm2835_gpio_set_pud(DRDY, BCM2835_GPIO_PUD_UP);      
  //ADS1256_WriteReg(REG_MUX,0x01);
  //ADS1256_WriteReg(REG_ADCON,0x20);
  // ADS1256_CfgADC(ADS1256_GAIN_1, ADS1256_15SPS);
  id = ADS1256_ReadChipID();
  printf("\n");
  printf("ID=\n");
  if (id != 3) {
    printf("Error, ASD1256 Chip ID = 0x%d\r\n", (int)id);
  }
  else {
    printf("Ok, ASD1256 Chip ID = 0x%d\n", (int)id);
  }
  ADS1256_CfgADC(ADS1256_GAIN_1, ADS1256_15SPS);
  ADS1256_StartScan(0);
  ch_num = 8;
  //if (ADS1256_Scan() == 0)
  //{
  //continue;
  //}
  while (1) {
    while ((ADS1256_Scan() == 0));
    for (i = 0; i < ch_num; i++) {
      adc[i] = ADS1256_GetAdc(i);
      volt[i] = (adc[i] * 100) / 167;
    }
    
    for (i = 0; i < ch_num; i++) {
        buf[0] = ((uint32_t)adc[i] >> 16) & 0xFF;
        buf[1] = ((uint32_t)adc[i] >> 8) & 0xFF;
        buf[2] = ((uint32_t)adc[i] >> 0) & 0xFF;
        printf("%d=%02X%02X%02X, %8ld", (int)i, (int)buf[0], 
               (int)buf[1], (int)buf[2], (long)adc[i]);
        
        iTemp = volt[i];        /* uV  */
        if (iTemp < 0) {
          iTemp = -iTemp;
          printf(" (-%ld.%03ld %03ld V)\n", iTemp /1000000, (iTemp%1000000)/1000, iTemp%1000);
        }
***** ADS1256_TEST_1.C

int main(int argc, char **argv)
{
        if (getuid() != 0) {
                fprintf(stderr, "Please, run the program as root or via sudo. Exit\n");

                return -1;
        }

        uint8_t id;
        int32_t adc[8];
        int32_t volt[8];
        uint8_t i;
        uint8_t ch_num;
        int32_t iTemp;
        int32_t V_in = 0;
        uint8_t buf[3];
        int32_t AIN3_val = 0;

        if (bcm2835_init() != 1) {
                fprintf(stderr, "bcm2835_init() error | Try to run as root\n");
                return -1;
        }

        bcm2835_spi_begin();
        bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_LSBFIRST);      // The default
        bcm2835_spi_setDataMode(BCM2835_SPI_MODE1);                   // The default
        bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_1024); // The default     
        bcm2835_gpio_fsel(SPICS, BCM2835_GPIO_FSEL_OUTP);//
        bcm2835_gpio_write(SPICS, HIGH);
        bcm2835_gpio_fsel(DRDY, BCM2835_GPIO_FSEL_INPT);
        bcm2835_gpio_set_pud(DRDY, BCM2835_GPIO_PUD_UP);        
        //ADS1256_WriteReg(REG_MUX,0x01);
        //ADS1256_WriteReg(REG_ADCON,0x20);
        // ADS1256_CfgADC(ADS1256_GAIN_1, ADS1256_15SPS);

        id = ADS1256_ReadChipID(); 
        if (id != 3) {
                printf("Error, ASD1256 Chip ID = 0x%d\r\n", (int)id);
        }
*****

***** ads1256_test.c
        else {
          printf(" ( %ld.%03ld %03ld V) volt[%d] = %ld \n", iTemp /1000000, (iTemp%1000000)/1000, iTemp%1000, i, volt[i]);
        }
    //  printf("\33[%dA", (int)ch_num);  
    bsp_DelayUS(1000000);       
    }
  }
  bcm2835_spi_end();
  bcm2835_close();
  
  return 0;
}
***** ADS1256_TEST_1.C
        else {
                printf("Ok, ASD1256 Chip ID = 0x%d\n", (int)id);
        }

        ADS1256_ReadOFC();

        ADS1256_ReadFSC();

        ADS1256_CfgADC(ADS1256_GAIN_1, ADS1256_15SPS);
        ADS1256_StartScan(0);
        ch_num = 8;

        while (1) {
                while (1) {
                        if (DRDY_IS_LOW() == 1) {
                                        if (g_tADS1256.ScanMode == 0) {
                                                ADS1256_SetChannal(0b0011);     /*Switch channel mode */
                                                bsp_DelayUS(5);

                                                ADS1256_WriteCmd(CMD_SYNC);
                                                bsp_DelayUS(5);

                                                ADS1256_WriteCmd(CMD_WAKEUP);
                                                bsp_DelayUS(25);

                                                AIN3_val = ADS1256_ReadData();
                                                printf("AIN3 = %ld\n", AIN3_val);
                                        }

                                        break;
                        }
                }

                buf[0] = ((uint32_t)AIN3_val >> 16) & 0xFF;
                buf[1] = ((uint32_t)AIN3_val >> 8) & 0xFF;
                buf[2] = ((uint32_t)AIN3_val >> 0) & 0xFF;

                printf("OUTPUT = %02X%02X%02X, %8ld", (int)buf[0], (int)buf[1], (int)buf[2], AIN3_val);

                V_in = AIN3_val*0.5925; /* Vin [uV] */
                if (V_in < 0) {
                        V_in = -V_in;
                        printf(" (-%ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
                }
                else {
                        printf(" ( %ld.%03ld %03ld V)\n", V_in / 1000000, (V_in % 1000000) / 1000, V_in % 1000);
                }

                bsp_DelayUS(1000000);
        }

        bcm2835_spi_end();
        bcm2835_close();

        return 0;
}
*****

